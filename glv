#!/usr/bin/env bash
#
# Golang Latest Version Manager
# Should work on sh, dash, bash, ksh, zsh
#
# Copyright (C) 2021-present, Implemented by Bin Hua <code@tourcoder.com>

GLV_VERSION="v0.2.0"
GLV_BIN_DIR="$HOME/.local/bin"
GO_INSTALL_ROOT="$HOME/.go"

golang_version_remote() {
  curl -s https://go.dev/VERSION?m=text | head -n 1 | awk -F'go' '{print $2}'
}

golang_version_local() {
  if command -v go > /dev/null; then
    go version | awk '{print $3}' | sed -e 's/go//'
  else
    echo "not installed"
  fi
}

golang_is_installed() {
  [ -x "$(command -v go)" ]
}

glv_is_installed() {
  [ -x "$(command -v glv)" ]
}

system_info() {
  echo "$(uname -s) $(uname -m)"
}

system_type() {
  local os=$(uname -s)
  local arch=$(uname -m)
  local go_arch

  case "$arch" in
    "x86_64")
      go_arch="amd64"
      ;;
    "arm64" | "aarch64")
      go_arch="arm64"
      ;;
    "i386" | "i686")
      go_arch="386"
      ;;
    *)
      go_arch=""
      ;;
  esac

  case "$os" in
    "Linux")
      if [ -n "$go_arch" ]; then
        echo "linux-${go_arch}"
      else
        echo "" # Unsupported arch
      fi
      ;;
    "Darwin")
      if [ -n "$go_arch" ]; then
        echo "darwin-${go_arch}"
      else
        echo "" # Unsupported arch
      fi
      ;;
    "MINGW*|MSYS*|CYGWIN*")
      if [ -n "$go_arch" ]; then
        echo "windows-${go_arch}"
      else
        echo "" # Unsupported arch
      fi
      ;;
    *) 
      echo "" # Unsupported OS
  esac
}

export_path_to_current_shell() {
  local EXPORTSCRIPT="export PATH=\"$GLV_BIN_DIR:\$PATH\"" 
  local profile_file

  if ! grep -Fq "$EXPORTSCRIPT" "$profile_file"; then
    case "$(basename "$SHELL")" in
      "zsh")
        profile_file="$HOME/.zshrc"
        ;;
      "bash")
        profile_file="$HOME/.bashrc"
        ;;
      *)
        echo "Done. Please add the following line to your shell's profile file:"
        echo "$EXPORTSCRIPT"
        return
        ;;
    esac

    echo "Appending PATH to $profile_file..."
    echo "" >> "$profile_file"
    echo "# GLV" >> "$profile_file"
    echo "$EXPORTSCRIPT" >> "$profile_file"
    echo "Done. Please restart your shell or run 'source $profile_file' to apply changes."
  else
    echo "PATH configuration for glv already exists in $profile_file. No changes made."
  fi
}

check_and_create_directories() {
  mkdir -p "$GLV_BIN_DIR"
  mkdir -p "$GO_INSTALL_ROOT"
}

opt_golang() {
  local latest_version=$(golang_version_remote)
  local local_version=$(golang_version_local)
  local sys_type=$(system_type)
  local go_pkg_name="go${latest_version}.${sys_type}.tar.gz"

  if [ -z "$sys_type" ]; then
    echo "System unsupported, please download and install manually from https://go.dev/dl/"
    exit 1
  fi

  if golang_is_installed && [ "$local_version" = "$latest_version" ]; then
    echo "The latest version ($latest_version) is already installed."
    exit 0
  fi

  echo "> Your system: $(system_info)"
  echo "  Suggestion: ${go_pkg_name}"
  read -p "  Continue? (Y/n) " answer

  if [[ "$answer" =~ ^[nN]$ ]]; then
    echo "Installation cancelled. You can also download installer from https://go.dev/dl/"
    exit 1
  fi

  if golang_is_installed; then
    echo "Updating Go from $local_version to $latest_version..."
  else
    echo "Installing Go $latest_version..."
  fi

  cd /tmp
  echo "Downloading ${go_pkg_name}..."
  if ! curl -fLO "https://go.dev/dl/${go_pkg_name}"; then
    echo "Failed to download Go. Please check your network or the version."
    exit 1
  fi

  local new_go_dir="$GO_INSTALL_ROOT/go_current"
  if [ -d "$new_go_dir" ]; then
    mv "$new_go_dir" "$GO_INSTALL_ROOT/go_${local_version}"
  fi

  echo "Extracting archive..."
  tar -C "$GO_INSTALL_ROOT" -zxf "$go_pkg_name"
  mv "$GO_INSTALL_ROOT/go" "$new_go_dir"

  echo "Cleaning up..."
  rm -f "$go_pkg_name"

  echo "Switching to new version..."

  local export_line="export PATH=\"$new_go_dir/bin:\$PATH\""

  if [[ ":$PATH:" != *":$new_go_dir/bin:"* ]]; then 
    case "$(basename "$SHELL")" in
      "zsh")
        profile_file="$HOME/.zshrc"
        ;;
      "bash")
        profile_file="$HOME/.bashrc"
        ;;
      *)
        echo "Done. Please add the following line to your shell's profile file:"
        echo "  $export_line"
        return 0
        ;;
    esac

    if grep -Fxq "$export_line" "$profile_file"; then
      echo "PATH update already exists in $profile_file"
    else
      echo "$export_line" >> "$profile_file"
      echo "Added Go path to $profile_file"
    fi
  fi

  echo "Go ${latest_version} has been installed successfully! Please restart your shell or run 'source $profile_file' to apply changes."
}

set_gopath() {
  if ! golang_is_installed; then
    echo "Golang is not installed. Please run 'glv -i' to install." && exit 1
  fi
  local GOPATH=$("$GO_INSTALL_ROOT/go_current/bin/go" env GOPATH)
  echo "Current GOPATH: ${GOPATH}"
  read -p "Do you want to change GOPATH? (y/N): " answer
  if [[ "$answer" =~ ^[yY]$ ]]; then
    read -p "Enter the new GOPATH: " new_gopath
    "$GO_INSTALL_ROOT/go_current/bin/go" env -w GOPATH="$new_gopath"
    echo "GOPATH has been changed to: $new_gopath"
  else
    echo "GOPATH unchanged."
  fi
}

set_gomodcache() {
  if ! golang_is_installed; then
    echo "Golang is not installed. Please run 'glv -i' to install." && exit 1
  fi
  local GOMODCACHE=$("$GO_INSTALL_ROOT/go_current/bin/go" env GOMODCACHE)
  echo "Current GOMODCACHE: ${GOMODCACHE}"
  read -p "Do you want to change GOMODCACHE? (y/N): " answer
  if [[ "$answer" =~ ^[yY]$ ]]; then
    read -p "Enter the new GOMODCACHE: " new_gomodcache
    "$GO_INSTALL_ROOT/go_current/bin/go" env -w GOMODCACHE="$new_gomodcache"
    echo "GOMODCACHE has been changed to: $new_gomodcache"
  else
    echo "GOMODCACHE unchanged."
  fi
}

glv_installed_version() {
  command glv --version 2>/dev/null || echo "none"
}

glv_remote_version() {
  curl -s https://glv.pages.dev/VERSION | head -n 1
}

opt_glv() {
  local local_v=$(glv_installed_version)
  local remote_v=$(glv_remote_version)
  if [ "$local_v" = "$remote_v" ]; then
    echo 
    echo "Your glv version ($local_v) is up to date."
    glv_help
  else
    echo 
    echo "GLV Local version: $local_v"
    echo "GLV Latest version: $remote_v"
    read -p "Do you want to upgrade glv? (y/N): " answer < /dev/tty
    if [[ "$answer" =~ ^[yY]$ ]]; then
      echo "Upgrading glv..."
      check_and_create_directories
      if curl -sL https://glv.pages.dev/glv -o "$GLV_BIN_DIR/glv"; then
        chmod +x "$GLV_BIN_DIR/glv"
        export_path_to_current_shell
        echo "glv has been upgraded. Please start a new shell session."
      else
        echo "Upgrade failed."
      fi
    else
      echo "glv upgrade cancelled."
    fi
  fi
}

glv_help() {
  echo
  echo "Golang Latest Version Manager ($GLV_VERSION)"
  echo
  echo "Usage: glv [OPTION]..."
  echo "Options:"
  echo "  -i, --install       Install or update to the latest Go version"
  echo "  -s, --setgopath     Set GOPATH"
  echo "  -sc,--setgomodcache Set GOMODCACHE"
  echo "  -h, --help          Show this help information"
  echo "  -v, --version       Show glv version"
  echo "  -u, --upgrade       Upgrade glv itself to the latest version"
  echo
}

main() {
  if ! command -v glv > /dev/null && [ ! -x "$GLV_BIN_DIR/glv" ]; then
      echo "Installing glv for the first time..."
      check_and_create_directories
      curl -sL https://glv.pages.dev/glv -o "$GLV_BIN_DIR/glv"
      chmod +x "$GLV_BIN_DIR/glv"
      export_path_to_current_shell
      echo "glv has been installed to $GLV_BIN_DIR/glv"
      echo "Please run 'glv --help' in a new shell session."
      exit 0
  fi

  case $1 in
    -i|--install) opt_golang ;;
    -s|--setgopath) set_gopath ;;
    -sc|--setgomodcache) set_gomodcache ;;
    -h|--help) glv_help ;;
    -v|--version) echo "$GLV_VERSION" ;;
    -u|--upgrade) opt_glv ;;
    "") opt_glv ;;
    *)
      echo "Invalid option: $1"
      glv_help
      exit 1
      ;;
  esac
}

main "$@"
