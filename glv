#!/usr/bin/env bash
#
# Golang Latest Version Manager
# Should work on sh, dash, bash, ksh, zsh
#
# Copyright (C) 2021-present, Implemented by Bin Hua <code@tourcoder.com>

golang_version_remote() {
  curl -s https://go.dev/VERSION?m=text | sed -e 's/^go//'
}

golang_version_local() {
  go version | awk '{print $3}' | sed -e 's/go//'
}

golang_is_installed() {
  if [[ $(command -v go) ]]; then
    return 0
  else
    return 1
  fi
}

system_type() {
  if [[ "$(uname)" = "Darwin" ]] ;then
      echo "darwin-amd64"
  elif [[ "$(uname)" = "Linux" ]]; then
    if [[ "$(getconf LONG_BIT)" = "64" ]]; then
      echo "linux-amd64"
    else
      echo "linux-386"
    fi
  elif [[ "$(uname)" = "MINGW32_NT" ]]; then
    echo -e "Please go to https://go.dev/dl/" && exit 1
  else
    echo -e "System unsupported" && exit 1
  fi
}

golang_version_file() {
  curl -LO https://go.dev/dl/go$(golang_version_remote).$(system_type).tar.gz
}

export_path_to_current_shell() {
  local EXPORTSCRITP="export PATH=\$PATH:/usr/local/go/bin"
  local currentshell=$(ps -p $PPID -o comm=)
  if [ "${currentshell}" == "-zsh" -o "${currentshell}" == "zsh" ]; then
    echo "${EXPORTSCRITP}">>~/.zshrc
    echo "Done, it is recommended to close and reopen the terminal" && exit 1
  elif [ "${currentshell}" == "-bash" -o "${currentshell}" == "bash" ]; then
    echo "${EXPORTSCRITP}">>~/.bashrc
    echo "Done, it is recommended to close and reopen the terminal" && exit 1
  else
    echo "Done, append the following to your shell profile\\nexport PATH=\$PATH:/usr/local/go/bin" && exit 1
  fi
}

opt_golang(){
  if golang_is_installed; then
    if [[ $(golang_version_local) == $(golang_version_remote) ]]; then
      echo "The latest version ($(golang_version_local)) is already installed on your system" 
    else
      echo "Local version: $(golang_version_local)"
      echo "Latest version: $(golang_version_remote)"
      read -p "Do you want to update? (y/N): " answer
      if [[ "${answer}" == "Y" ]] || [[ "${answer}" == "y" ]] || [[ "${answer}" == "" ]]; then
        echo "Updating..."
        cd /tmp
        golang_version_file
        sudo mv /usr/local/go /usr/local/go$(golang_version_local)
        sudo tar -C /usr/local -zxf go$(golang_version_remote).$(system_type).tar.gz
        rm -rf go$(golang_version_remote).$(system_type).tar.gz
        export_path_to_current_shell
      else
        echo -e "Golang update cancelled" && exit 1
      fi
    fi
  else
    echo "Installing..."
    cd /tmp
    golang_version_file
    sudo tar -C /usr/local -zxf go$(golang_version_remote).$(system_type).tar.gz
    rm -rf go$(golang_version_remote).$(system_type).tar.gz
    export_path_to_current_shell
  fi
}

set_gopath() {
  if golang_is_installed; then
    local GOPATH=$(go env GOPATH)
    echo "Current GOPATH: ${GOPATH}"
    read -p "Do you want to change GOPATH? (y/N): " answer
    if [[ "${answer}" == "Y" ]] || [[ "${answer}" == "y" ]] || [[ "${answer}" == "" ]]; then
      read -p "Enter the new GOPATH: " new_gopath
      go env -w GOPATH=$new_gopath
      echo "GOPATH has been changed to: ${new_gopath}, run 'go env' to check"
    else
      echo "GOPATH unchanged" && exit 1
    fi
  else
    echo "Golang is not installed, please run 'glv -i' to install" && exit 1
  fi
}

glv_version() {
  echo "v0.1.3"
}

glv_version_local() {
  glv --version
}

opt_glv() {
  if [[ $(glv_version_local) == $(glv_version) ]]; then
    glv_help
  else
    echo "GLV Local version: $(glv_version_local)"
    echo "GLV Latest version: $(glv_version)"
    read -p "Do you want to update? (y/N): " answer
    if [[ "${answer}" == "Y" ]] || [[ "${answer}" == "y" ]] || [[ "${answer}" == "" ]]; then
      echo "Updating..."
      sudo curl -sL https://raw.githubusercontent.com/glv-go/glv/master/glv -o /usr/local/bin/glv
      sudo chmod +x /usr/local/bin/glv
      echo -e "glv updated..." && exit 0
    else
      echo -e "glv update cancelled" && exit 1
    fi
  fi
}

glv_help() {
  echo
  echo "Golang Latest Version Manager ($(glv_version))"
  echo
  echo "Usage: glv [OPTION]..."
  echo "Options:"
  echo "  -i, --install      Install/Update Golang"
  echo "  -s, --setgopath    Set GOPATH"
  echo "  -h, --help         Show help information"
  echo "  -v, --version      Show GLV version"
  echo "  -u, --upgrade      Upgrade GLV to latest version"
  echo
}

main(){
  if  [[ $(command -v glv) ]]; then
    case $1 in
      -i|--install)
        opt_golang
        exit 0
        ;;
      -s|--setgopath)
        set_gopath
        exit 0
        ;;
      -h|--help)
        glv_help
        exit 0
        ;;
      -v|--version)
        echo $(glv_version)
        exit 0
        ;;
      -u|--upgrade)
        opt_glv
        exit 0
        ;;
      *)
        opt_glv
        exit 1
        ;;
    esac
  else
    sudo curl -sL https://raw.githubusercontent.com/glv-go/glv/master/glv -o /usr/local/bin/glv
    sudo chmod +x /usr/local/bin/glv
    echo "glv installed, just run 'glv --help'" && exit 1
  fi
}

main $1